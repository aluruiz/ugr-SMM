/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica7b_paint2d;

import sm.prg.iu.Herramientas;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;

/**
 *
 * @author Shiri
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private BufferedImage imgSource;

    /**
     * Creates new form ventanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }
    
    public VentanaInterna seleccionVentana(){
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        return vi; 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colores = new javax.swing.ButtonGroup();
        formas = new javax.swing.ButtonGroup();
        atributos = new javax.swing.JPanel();
        herramientasImagenes = new javax.swing.JToolBar();
        jPanel3 = new javax.swing.JPanel();
        brillibrilli = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        filtrito = new javax.swing.JPanel();
        comboFiltros = new javax.swing.JComboBox<>();
        constrati = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        contraste = new javax.swing.JButton();
        iluminar = new javax.swing.JButton();
        oscurecer = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        sinusoidal = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        rotacion90 = new javax.swing.JButton();
        rotacion180 = new javax.swing.JButton();
        rotacion270 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        aumentar = new javax.swing.JButton();
        disminuir = new javax.swing.JButton();
        etiqueta = new javax.swing.JLabel();
        barraHerramientas = new javax.swing.JToolBar();
        punto = new javax.swing.JToggleButton();
        linea = new javax.swing.JToggleButton();
        rectangulo = new javax.swing.JToggleButton();
        elipse = new javax.swing.JToggleButton();
        selecion = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        tamGrosor = new javax.swing.JSpinner();
        relleno = new javax.swing.JToggleButton();
        transparencia = new javax.swing.JToggleButton();
        alisar = new javax.swing.JToggleButton();
        colores2 = new javax.swing.JPanel();
        blanco = new javax.swing.JToggleButton();
        amarillo = new javax.swing.JToggleButton();
        verde = new javax.swing.JToggleButton();
        azul = new javax.swing.JToggleButton();
        negro = new javax.swing.JToggleButton();
        rojo = new javax.swing.JToggleButton();
        escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        Nuevo = new javax.swing.JMenuItem();
        Abrir = new javax.swing.JMenuItem();
        Guardar = new javax.swing.JMenuItem();
        Edicion = new javax.swing.JMenu();
        verBarraEstado = new javax.swing.JCheckBoxMenuItem();
        verBarraFormas = new javax.swing.JCheckBoxMenuItem();
        verBarraAtributos = new javax.swing.JCheckBoxMenuItem();
        Imagen = new javax.swing.JMenu();
        rescale = new javax.swing.JMenuItem();
        convolve = new javax.swing.JMenuItem();
        affineTransform = new javax.swing.JMenuItem();
        lookUp = new javax.swing.JMenuItem();
        bandCombine = new javax.swing.JMenuItem();
        colorConvert = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        atributos.setLayout(new java.awt.BorderLayout());

        herramientasImagenes.setRollover(true);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        sliderBrillo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        brillibrilli.add(sliderBrillo);

        jPanel3.add(brillibrilli);

        comboFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Fronteras" }));
        comboFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFiltrosActionPerformed(evt);
            }
        });
        filtrito.add(comboFiltros);

        jPanel3.add(filtrito);

        contraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/contraste.png"))); // NOI18N
        contraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteActionPerformed(evt);
            }
        });
        jPanel1.add(contraste);

        iluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/iluminar.png"))); // NOI18N
        iluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminarActionPerformed(evt);
            }
        });
        jPanel1.add(iluminar);

        oscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/oscurecer.png"))); // NOI18N
        oscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecerActionPerformed(evt);
            }
        });
        jPanel1.add(oscurecer);

        constrati.add(jPanel1);

        sinusoidal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/sinusoidal.png"))); // NOI18N
        sinusoidal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinusoidalActionPerformed(evt);
            }
        });
        jPanel2.add(sinusoidal);

        constrati.add(jPanel2);

        jPanel3.add(constrati);

        sliderRotacion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        jPanel4.add(sliderRotacion);

        rotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/rotacion90.png"))); // NOI18N
        rotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90ActionPerformed(evt);
            }
        });
        jPanel4.add(rotacion90);

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/rotacion180.png"))); // NOI18N
        rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180ActionPerformed(evt);
            }
        });
        jPanel4.add(rotacion180);

        rotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/rotacion270.png"))); // NOI18N
        rotacion270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion270ActionPerformed(evt);
            }
        });
        jPanel4.add(rotacion270);

        jPanel3.add(jPanel4);

        aumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/aumentar.png"))); // NOI18N
        aumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarActionPerformed(evt);
            }
        });
        jPanel5.add(aumentar);

        disminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/disminuir.png"))); // NOI18N
        disminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disminuirActionPerformed(evt);
            }
        });
        jPanel5.add(disminuir);

        jPanel3.add(jPanel5);

        herramientasImagenes.add(jPanel3);

        atributos.add(herramientasImagenes, java.awt.BorderLayout.CENTER);

        etiqueta.setText("Elige una herramienta.");
        atributos.add(etiqueta, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(atributos, java.awt.BorderLayout.PAGE_END);

        barraHerramientas.setRollover(true);

        formas.add(punto);
        punto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/punto.png"))); // NOI18N
        punto.setFocusable(false);
        punto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        punto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        punto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puntoActionPerformed(evt);
            }
        });
        barraHerramientas.add(punto);

        formas.add(linea);
        linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/linea.png"))); // NOI18N
        linea.setFocusable(false);
        linea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaActionPerformed(evt);
            }
        });
        barraHerramientas.add(linea);

        formas.add(rectangulo);
        rectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/rectangulo.png"))); // NOI18N
        rectangulo.setFocusable(false);
        rectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloActionPerformed(evt);
            }
        });
        barraHerramientas.add(rectangulo);

        formas.add(elipse);
        elipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/elipse.png"))); // NOI18N
        elipse.setFocusable(false);
        elipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        elipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        elipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elipseActionPerformed(evt);
            }
        });
        barraHerramientas.add(elipse);

        selecion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/seleccion.png"))); // NOI18N
        selecion.setFocusable(false);
        selecion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selecion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selecion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecionActionPerformed(evt);
            }
        });
        barraHerramientas.add(selecion);
        barraHerramientas.add(jSeparator1);

        tamGrosor.setMaximumSize(new java.awt.Dimension(29, 20));
        tamGrosor.setValue(1);
        tamGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tamGrosorStateChanged(evt);
            }
        });
        barraHerramientas.add(tamGrosor);

        relleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/rellenar.png"))); // NOI18N
        relleno.setFocusable(false);
        relleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        relleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        relleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenoActionPerformed(evt);
            }
        });
        barraHerramientas.add(relleno);

        transparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/transparencia.png"))); // NOI18N
        transparencia.setFocusable(false);
        transparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparenciaActionPerformed(evt);
            }
        });
        barraHerramientas.add(transparencia);

        alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/alisar.png"))); // NOI18N
        alisar.setFocusable(false);
        alisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisarActionPerformed(evt);
            }
        });
        barraHerramientas.add(alisar);

        blanco.setBackground(java.awt.Color.white);
        colores.add(blanco);
        blanco.setPreferredSize(new java.awt.Dimension(20, 20));
        blanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blancoActionPerformed(evt);
            }
        });
        colores2.add(blanco);

        amarillo.setBackground(java.awt.Color.yellow);
        colores.add(amarillo);
        amarillo.setPreferredSize(new java.awt.Dimension(20, 20));
        amarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amarilloActionPerformed(evt);
            }
        });
        colores2.add(amarillo);

        verde.setBackground(java.awt.Color.green);
        colores.add(verde);
        verde.setPreferredSize(new java.awt.Dimension(20, 20));
        verde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verdeActionPerformed(evt);
            }
        });
        colores2.add(verde);

        azul.setBackground(java.awt.Color.blue);
        colores.add(azul);
        azul.setPreferredSize(new java.awt.Dimension(20, 20));
        azul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                azulActionPerformed(evt);
            }
        });
        colores2.add(azul);

        negro.setBackground(java.awt.Color.black);
        colores.add(negro);
        negro.setPreferredSize(new java.awt.Dimension(20, 20));
        negro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negroActionPerformed(evt);
            }
        });
        colores2.add(negro);

        rojo.setBackground(java.awt.Color.red);
        colores.add(rojo);
        rojo.setPreferredSize(new java.awt.Dimension(20, 20));
        rojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rojoActionPerformed(evt);
            }
        });
        colores2.add(rojo);

        barraHerramientas.add(colores2);

        getContentPane().add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1068, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        Archivo.setText("Archivo");

        Nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/nuevo.png"))); // NOI18N
        Nuevo.setText("Nuevo");
        Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoActionPerformed(evt);
            }
        });
        Archivo.add(Nuevo);

        Abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/abrir.png"))); // NOI18N
        Abrir.setText("Abrir");
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        Archivo.add(Abrir);

        Guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica7b_paint2d/iconos/guardar.png"))); // NOI18N
        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        Archivo.add(Guardar);

        jMenuBar1.add(Archivo);

        Edicion.setText("Edicion");

        verBarraEstado.setSelected(true);
        verBarraEstado.setText("Ver barra de estado");
        verBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraEstadoActionPerformed(evt);
            }
        });
        Edicion.add(verBarraEstado);

        verBarraFormas.setSelected(true);
        verBarraFormas.setText("Ver barra de formas");
        verBarraFormas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraFormasActionPerformed(evt);
            }
        });
        Edicion.add(verBarraFormas);

        verBarraAtributos.setSelected(true);
        verBarraAtributos.setText("Ver barra de atributos");
        verBarraAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraAtributosActionPerformed(evt);
            }
        });
        Edicion.add(verBarraAtributos);

        jMenuBar1.add(Edicion);

        Imagen.setText("Imagen");

        rescale.setText("RescaleOp");
        rescale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescaleActionPerformed(evt);
            }
        });
        Imagen.add(rescale);

        convolve.setText("ConvolveOp");
        convolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolveActionPerformed(evt);
            }
        });
        Imagen.add(convolve);

        affineTransform.setText("AffineTransformOp");
        affineTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affineTransformActionPerformed(evt);
            }
        });
        Imagen.add(affineTransform);

        lookUp.setText("LookupOp");
        lookUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookUpActionPerformed(evt);
            }
        });
        Imagen.add(lookUp);

        bandCombine.setText("BandCombineOp");
        Imagen.add(bandCombine);

        colorConvert.setText("ColorConvertOp");
        Imagen.add(colorConvert);

        jMenuBar1.add(Imagen);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
//Funciones Extras
public LookupTable seno(double w){
    double K = 255.0; // Cte de normalización
    // Código implementado f(x)=|sin(wx)|
    byte[] lt = new byte[256];
    for (int i = 0; i < 256; i++)
        lt[i] = (byte)Math.abs(K * Math.sin( w * i ));     
    ByteLookupTable slt = new ByteLookupTable(0, lt);
    return slt;
}

public BufferedImage rotacion(BufferedImage imgSource, double grados){
    double r = Math.toRadians(grados);
    Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
    AffineTransformOp atop;
    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
    BufferedImage imgdest = atop.filter(imgSource, null);
    return imgdest;
}
  
public BufferedImage escalado(BufferedImage imgSource, double factorEscala){
    AffineTransform at = AffineTransform.getScaleInstance(factorEscala, factorEscala);
    AffineTransformOp atop;
    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
    return atop.filter(imgSource, null);
}

//Botones
    private void NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoActionPerformed
       VentanaInterna vi = new VentanaInterna();
       escritorio.add(vi);
       vi.setVisible(true);
       BufferedImage img;
       img = new BufferedImage(300,300,BufferedImage.TYPE_INT_RGB);
       vi.getLienzo().setImage(img);
    }//GEN-LAST:event_NuevoActionPerformed

    private void negroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negroActionPerformed
        seleccionVentana().getLienzo().setColor(Color.black);
    }//GEN-LAST:event_negroActionPerformed

    private void rojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rojoActionPerformed
        seleccionVentana().getLienzo().setColor(Color.red);
    }//GEN-LAST:event_rojoActionPerformed

    private void azulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_azulActionPerformed
        seleccionVentana().getLienzo().setColor(Color.blue);
    }//GEN-LAST:event_azulActionPerformed

    private void blancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blancoActionPerformed
        seleccionVentana().getLienzo().setColor(Color.white);
    }//GEN-LAST:event_blancoActionPerformed

    private void amarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amarilloActionPerformed
        seleccionVentana().getLienzo().setColor(Color.yellow);
    }//GEN-LAST:event_amarilloActionPerformed

    private void verdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verdeActionPerformed
        seleccionVentana().getLienzo().setColor(Color.green);
    }//GEN-LAST:event_verdeActionPerformed

    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo().setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            }catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_AbrirActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = vi.getLienzo().getImage(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    }
                }catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_GuardarActionPerformed

    private void verBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraEstadoActionPerformed
        if(verBarraEstado.isSelected()){
            this.etiqueta.setVisible(true);
        }
        else{
            this.etiqueta.setVisible(false);
        }
    }//GEN-LAST:event_verBarraEstadoActionPerformed

    private void verBarraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraFormasActionPerformed
        if(verBarraFormas.isSelected()){
            this.barraHerramientas.setVisible(true);
        }
        else{
            this.barraHerramientas.setVisible(false);
        }
    }//GEN-LAST:event_verBarraFormasActionPerformed

    private void verBarraAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraAtributosActionPerformed
        if(verBarraAtributos.isSelected()){
            this.atributos.setVisible(true);
        }
        else{
            this.atributos.setVisible(false);
        }
    }//GEN-LAST:event_verBarraAtributosActionPerformed

    private void alisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisarActionPerformed
        if (alisar.isSelected()){
            seleccionVentana().getLienzo().setAlisar(true);
        }
        else{
            seleccionVentana().getLienzo().setAlisar(false);
        }
    }//GEN-LAST:event_alisarActionPerformed

    private void transparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparenciaActionPerformed
        if (transparencia.isSelected()){
            seleccionVentana().getLienzo().setTransparencia(true);
        }
        else{
            seleccionVentana().getLienzo().setTransparencia(false);
        }
    }//GEN-LAST:event_transparenciaActionPerformed

    private void rellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenoActionPerformed
        if (relleno.isSelected()){
            seleccionVentana().getLienzo().setRelleno(true);
        }
        else{
            seleccionVentana().getLienzo().setRelleno(false);
        }
    }//GEN-LAST:event_rellenoActionPerformed

    private void tamGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tamGrosorStateChanged
        Stroke nuevo = new BasicStroke((int)tamGrosor.getValue());
        seleccionVentana().getLienzo().setStroke(nuevo);
    }//GEN-LAST:event_tamGrosorStateChanged

    private void selecionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecionActionPerformed
        if (selecion.isSelected()){
            seleccionVentana().getLienzo().setEditar(true);
        }
        else{
            seleccionVentana().getLienzo().setEditar(false);
        }
    }//GEN-LAST:event_selecionActionPerformed

    private void elipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elipseActionPerformed
        seleccionVentana().getLienzo().setForma(Herramientas.elipse);
        etiqueta.setText("Elipse.");
    }//GEN-LAST:event_elipseActionPerformed

    private void rectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloActionPerformed
        seleccionVentana().getLienzo().setForma(Herramientas.rectangulo);
        etiqueta.setText("Rectangulo.");
    }//GEN-LAST:event_rectanguloActionPerformed

    private void lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaActionPerformed
        seleccionVentana().getLienzo().setForma(Herramientas.linea);
        etiqueta.setText("Linea.");
    }//GEN-LAST:event_lineaActionPerformed

    private void puntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puntoActionPerformed
        seleccionVentana().getLienzo().setForma(Herramientas.punto);
        etiqueta.setText("Punto.");
    }//GEN-LAST:event_puntoActionPerformed

    private void rescaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescaleActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgSource = vi.getLienzo().getImage(true);
            if(imgSource!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    BufferedImage imgdest = rop.filter(imgSource, vi.getLienzo().getImage());
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rescaleActionPerformed

    private void convolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_convolveActionPerformed

    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.getLienzo().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
            imgSource = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imgSource = null;
        sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        BufferedImage img = vi.getLienzo().getImage();
           
        if(img!=null && imgSource != null){
            try{
                RescaleOp rop;           
                if(imgSource.getColorModel().hasAlpha()){
                    float[] factorEscala = {1.0F,1.0F,1.0F,1.0F};
                    float[] offSet = {sliderBrillo.getValue(), sliderBrillo.getValue(), sliderBrillo.getValue(), 0.0F};
                    rop = new RescaleOp(factorEscala, offSet, null);
                }
                else
                    rop = new RescaleOp(1.0F, sliderBrillo.getValue(), null);
                    rop.filter(imgSource, img);
                    escritorio.repaint();
            } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    private void comboFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFiltrosActionPerformed
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        String filtro = (String) comboFiltros.getSelectedItem();
            if (vi != null){
                imgSource = vi.getLienzo().getImage();
                try{
                    Kernel k = null; 
                    switch(filtro){
                        case "Media":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                            break;
                        case "Binomial":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                            break;
                        case "Enfoque":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                            break; 
                        case "Relieve":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                            break;
                        case "Fronteras":
                            k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                            break;
                    }
                    if (k!=null){
                        ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                        BufferedImage img = cop.filter(imgSource, null);
                        vi.getLienzo().setImage(img);
                        vi.repaint();
                    }
                } catch(IllegalArgumentException e){
                    System.err.println("Error");
                }
        }
    }//GEN-LAST:event_comboFiltrosActionPerformed

    private void sinusoidalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinusoidalActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                LookupTable lt;
                lt= seno(180);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter(imgSource, imgSource);
                vi.getLienzo().setImage(imgSource);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_sinusoidalActionPerformed

    private void affineTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affineTransformActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_affineTransformActionPerformed

    private void lookUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookUpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter(imgSource, imgSource);
                vi.getLienzo().setImage(imgSource);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_lookUpActionPerformed

    private void contrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter(imgSource, imgSource);
                vi.getLienzo().setImage(imgSource);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_contrasteActionPerformed

    private void iluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_ROOT);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter(imgSource, imgSource);
                vi.getLienzo().setImage(imgSource);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_iluminarActionPerformed

    private void oscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecerActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter(imgSource, imgSource);
                vi.getLienzo().setImage(imgSource);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }   
        }
    }//GEN-LAST:event_oscurecerActionPerformed

    private void rotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                BufferedImage dest = rotacion(imgSource, 90);
                vi.getLienzo().setImage(dest);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }   
        }
    }//GEN-LAST:event_rotacion90ActionPerformed

    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                BufferedImage dest = rotacion(imgSource, 180);
                vi.getLienzo().setImage(dest);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }   
        }
    }//GEN-LAST:event_rotacion180ActionPerformed

    private void rotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                BufferedImage dest = rotacion(imgSource, 270);
                vi.getLienzo().setImage(dest);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }   
        }
    }//GEN-LAST:event_rotacion270ActionPerformed

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if(vi!=null){
            ColorModel cm = vi.getLienzo().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
            imgSource = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imgSource = null;
        sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        rotacion(imgSource, this.sliderRotacion.getValue());
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void aumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                BufferedImage dest = escalado(imgSource, 1.25);
                vi.getLienzo().setImage(dest);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }   
        }
    }//GEN-LAST:event_aumentarActionPerformed

    private void disminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame()); 
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try{
                BufferedImage dest = escalado(imgSource, 0.75);
                vi.getLienzo().setImage(dest);
                vi.repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }   
        }
    }//GEN-LAST:event_disminuirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Abrir;
    private javax.swing.JMenu Archivo;
    private javax.swing.JMenu Edicion;
    private javax.swing.JMenuItem Guardar;
    private javax.swing.JMenu Imagen;
    private javax.swing.JMenuItem Nuevo;
    private javax.swing.JMenuItem affineTransform;
    private javax.swing.JToggleButton alisar;
    private javax.swing.JToggleButton amarillo;
    private javax.swing.JPanel atributos;
    private javax.swing.JButton aumentar;
    private javax.swing.JToggleButton azul;
    private javax.swing.JMenuItem bandCombine;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JToggleButton blanco;
    private javax.swing.JPanel brillibrilli;
    private javax.swing.JMenuItem colorConvert;
    private javax.swing.ButtonGroup colores;
    private javax.swing.JPanel colores2;
    private javax.swing.JComboBox<String> comboFiltros;
    private javax.swing.JPanel constrati;
    private javax.swing.JButton contraste;
    private javax.swing.JMenuItem convolve;
    private javax.swing.JButton disminuir;
    private javax.swing.JToggleButton elipse;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel etiqueta;
    private javax.swing.JPanel filtrito;
    private javax.swing.ButtonGroup formas;
    private javax.swing.JToolBar herramientasImagenes;
    private javax.swing.JButton iluminar;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToggleButton linea;
    private javax.swing.JMenuItem lookUp;
    private javax.swing.JToggleButton negro;
    private javax.swing.JButton oscurecer;
    private javax.swing.JToggleButton punto;
    private javax.swing.JToggleButton rectangulo;
    private javax.swing.JToggleButton relleno;
    private javax.swing.JMenuItem rescale;
    private javax.swing.JToggleButton rojo;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton rotacion270;
    private javax.swing.JButton rotacion90;
    private javax.swing.JToggleButton selecion;
    private javax.swing.JButton sinusoidal;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSpinner tamGrosor;
    private javax.swing.JToggleButton transparencia;
    private javax.swing.JCheckBoxMenuItem verBarraAtributos;
    private javax.swing.JCheckBoxMenuItem verBarraEstado;
    private javax.swing.JCheckBoxMenuItem verBarraFormas;
    private javax.swing.JToggleButton verde;
    // End of variables declaration//GEN-END:variables
}
